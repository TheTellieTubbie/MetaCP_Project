# Automating Cryptographic Protocol Language Generation from Structured Specifications

This folder will contain all the necessary files to replicate the results from the paper and run the tool.

## The tool is composed of several components so we will run you trough each aspect individually.

first go ahead and install the dependencies

   sudo apt update
   sudo apt install xsltproc
   sudo apt install maude
   sudo apt install libasio-dev
   sudo apt install libcrypto++-dev
   sudo apt install npm

(Optional) for conveninece we have already downloaded the dependencies (correct version) they are available at `http://metacp.eu/FORMALISE-Packages.zip`

This assumes ubuntu 20.04 and allows for installation without internet in case the reviewers do not wish to connect the VM:

    unzip packages.zip
    cd packages/
    sudo apt update
    sudo dpkg -i *.deb (run twice please, this fixes the errors encountered which are due to dependency ordering in downloaded deb files)

## Exporting to multiple languages from single PSV

First we allow for evaluation across three sample protocols in the folder: 
	quick_reproducibility/
	
Each of the 3 folders (quick_reproducibility/DH ,  quick_reproducibility/NS and quick_reproducibility/NSL) contains a different protocol, with a PSV file generated by the GDE forming the high level description of the protocol. 

	Each sample also contains the result of the interpretation to each of the target languages (tamarin, proverif and C++), in the respectively named folders.
	- tamarin and proverif are two state of the art cryptographic protocol theorem provers please visit their respective website (Tamarin - https://tamarin-prover.github.io/, ProVerif - https://bblanche.gitlabpages.inria.fr/proverif/) if you want to know more. We do not extend these tools in any way just make use of them for verification stages.

We conveniently provide binaries for ProVerif and Tamarin in the folders quick_reproducibility/tamarin and quick_reproducibility/proverif, so that the resulting models can be ran.

To reproduce the protocol generation we provide the refinement plugins that generated the code in folder quick_reproducibility/plugins .

## In order to generate a model file from the PSV you must run the following commands:

Enter the quick_reproducibility folder

	cd quick_reproducibility/	

For Tamarin:

	xsltproc plugins/tamarin.xsl <name of psv file> > myprotocol.sphty
	
	for example, this will generate the tamarin code or the diffie hellman protocol:
	
	xsltproc plugins/tamarin.xsl DH/DH.psv > myprotocol.sphty
	
For ProVerif

	xsltproc plugins/proverif.xsl <name of psv file> > myprotocol.pv
	
	for example, this will generate the ProVerif code or the diffie hellman protocol:
	
	xsltproc plugins/proverif.xsl DH/DH.psv > myprotocol.pv

For C++

	xsltproc plugins/cpp.xsl <name of psv file> > myprotocol.cpp
	
	for example, this will generate the ProVerif code or the diffie hellman protocol:
	
	xsltproc plugins/cpp.xsl DH/DH.psv > myprotocol.cpp

two further files are provided channel.cpp and channel.h for running the cpp code locally.

## In order to run the generated files.
	
Once your files are generated you may wish to run them, to do so you can do the following:

	cd quick_reproducibility/

For Tamarin:

	tamarin/tamarin-prover <filename> --prove
	
	for example this will run the tamarin model generated for diffie-hellman
	
	tamarin/tamarin-prover DH/tamarin_model/DH.spthy --prove

	
For ProVerif

	proverif/proverif <filename>
	
	for example this will run the proverif model generated for diffie-hellman
	
	proverif/proverif DH/proverif_model/DH.pv 
For C++

In this case we first have to install the libraries required onto the system, the libraries are provided inside the quick_reproducibility/cpp/ folder:
	- Assuming you are using the sample files provided, otherwise adjust filenames appropriately
	
	compile the channel
		cd quick_reproducibility/
		c++ -O3 -Wall -c cpp/channel.cpp -o cpp/channel.o # first-time-only
	compile the protocol using the generated channel
		c++ -O3 -Wall cpp/channel.o DH/cpp_model/DH.cpp -o dh -pthread -lcryptopp
		
	run the protocol:
		./dh <g> <p> <A|B> [remote-host]
		
		for example this will run the CPP generated for diffie-hellman on localhost, port 10000, with initiator B going first (if A is ran first it will time out after 10 cycles of waiting for B)
		
		./dh 3. 9692442802821327950508911771308328052666887550900435682895207347568406495843849224672416130967884554259211675299291454161197981395799145169370398324975923. B
		
		then A in a different terminal
		
		./dh 3. 9692442802821327950508911771308328052666887550900435682895207347568406495843849224672416130967884554259211675299291454161197981395799145169370398324975923. A
		
		 And the parties will share a DH key through a real network!
	
		
## Running using the graphical interface

First you must start the GDE

	cd meta-cp-FORMALISE/meta-cp-gde
	npm start
Then you must start the backend which deals with the plugins in a different terminal
	cd meta-cp-FORMALISE/node-backend/src/api
	npm start	

Navigate the browser to localhost:3000
Start designing your protocol, follow instructions under the _instruction_ tab, use _save_ to download the PSV and _export_ to transparently call the plugins. 

This features are also provided at http://demo.metacp.eu , including further samples
	
		


